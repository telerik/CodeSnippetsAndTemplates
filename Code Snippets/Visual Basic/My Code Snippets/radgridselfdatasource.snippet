<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>RadGrid Self Data Source</Title>
      <Shortcut>radgridselfdatasource</Shortcut>
      <Description>VB code snippet for Generating a DataSource based on the Grid's Markup definition</Description>
      <Author>Progress</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
       <Code Language="VB">
<![CDATA[
    Protected Sub RadGrid1_NeedDataSource(sender As Object, e As GridNeedDataSourceEventArgs)
        Dim grid = CType(sender, RadGrid)
        grid.DataSource = GridSelfDataSource(grid)
    End Sub

    Private Function GridSelfDataSource(ByVal grid As RadGrid, ByVal Optional recordsCount As Integer = 100) As DataTable
        If Not grid.AllowPaging Then recordsCount = 20
        Dim dt = New DataTable()
        Dim dataKeyNames = grid.MasterTableView.DataKeyNames

        For Each dataKeyName As String In dataKeyNames
            dt.Columns.Add(New DataColumn(dataKeyName, GetType(Integer)))
        Next

        If dataKeyNames.Length > 0 Then dt.PrimaryKey = New DataColumn() {dt.Columns(dataKeyNames(0))}
        Dim dataColumns As IEnumerable(Of IGridDataColumn) = grid.MasterTableView.RenderColumns.OfType(Of IGridDataColumn)()

        For Each boundCol As GridBoundColumn In dataColumns.Where(Function(col) col.[GetType]().Name = "GridBoundColumn").[Select](Function(col) TryCast(col, GridBoundColumn))
            If String.IsNullOrEmpty(boundCol.DataField) Then Continue For
            Dim dataType As Type = boundCol.DataType

            If boundCol.Aggregate <> GridAggregateFunction.None Then

                Select Case boundCol.Aggregate
                    Case GridAggregateFunction.Sum, GridAggregateFunction.Min, GridAggregateFunction.Max, GridAggregateFunction.Avg
                        dataType = GetType(Double)
                End Select
            End If

            If dataKeyNames.Contains(boundCol.DataField) Then

                If dataType <> GetType(String) Then
                    dt.Columns(boundCol.DataField).DataType = dataType
                End If
            ElseIf dt.Columns.IndexOf(boundCol.DataField) < 0 Then
                dt.Columns.Add(boundCol.DataField, dataType)
            End If
        Next

        For Each gridCol As IGridDataColumn In dataColumns.Where(Function(col) col.[GetType]().Name <> "GridBoundColumn")
            Dim activeDataField As String = gridCol.GetActiveDataField()
            If String.IsNullOrEmpty(activeDataField) OrElse dt.Columns.IndexOf(activeDataField) > -1 Then Continue For
            Dim numericCol As GridNumericColumn = TryCast(gridCol, GridNumericColumn)

            If numericCol IsNot Nothing Then
                dt.Columns.Add(numericCol.DataField, GetType(Integer))
            End If

            Dim dateTimeCol As GridDateTimeColumn = TryCast(gridCol, GridDateTimeColumn)

            If dateTimeCol IsNot Nothing Then
                dt.Columns.Add(dateTimeCol.DataField, GetType(DateTime))
            End If

            Dim templateCol As GridTemplateColumn = TryCast(gridCol, GridTemplateColumn)

            If templateCol IsNot Nothing Then
                dt.Columns.Add(templateCol.DataField, templateCol.DataType)
            End If

            Dim hyperLinkCol As GridHyperLinkColumn = TryCast(gridCol, GridHyperLinkColumn)

            If hyperLinkCol IsNot Nothing Then
                If Not String.IsNullOrEmpty(hyperLinkCol.DataTextField) AndAlso dt.Columns.IndexOf(hyperLinkCol.DataTextField) < 0 Then dt.Columns.Add(hyperLinkCol.DataTextField, hyperLinkCol.DataType)

                For Each navUrl As String In hyperLinkCol.DataNavigateUrlFields
                    If dt.Columns.IndexOf(navUrl) >= 0 Then Continue For
                    dt.Columns.Add(navUrl, hyperLinkCol.DataType)
                Next
            End If

            Dim dropDownCol As GridDropDownColumn = TryCast(gridCol, GridDropDownColumn)

            If dropDownCol IsNot Nothing Then
                If Not String.IsNullOrEmpty(dropDownCol.DataField) AndAlso dt.Columns.IndexOf(dropDownCol.DataField) < 0 Then dt.Columns.Add(dropDownCol.DataField, dropDownCol.DataType)
                If Not String.IsNullOrEmpty(dropDownCol.ListTextField) AndAlso dt.Columns.IndexOf(dropDownCol.ListTextField) < 0 Then dt.Columns.Add(dropDownCol.ListTextField, dropDownCol.DataType)
                If Not String.IsNullOrEmpty(dropDownCol.ListValueField) AndAlso dt.Columns.IndexOf(dropDownCol.ListValueField) < 0 Then dt.Columns.Add(dropDownCol.ListValueField, dropDownCol.DataType)
                If Not String.IsNullOrEmpty(dropDownCol.ListDataMember) AndAlso dt.Columns.IndexOf(dropDownCol.ListDataMember) < 0 Then dt.Columns.Add(dropDownCol.ListDataMember, dropDownCol.DataType)
            End If

            Dim autoCompleteCol As GridAutoCompleteColumn = TryCast(gridCol, GridAutoCompleteColumn)

            If autoCompleteCol IsNot Nothing Then
                If Not String.IsNullOrEmpty(autoCompleteCol.DataField) AndAlso dt.Columns.IndexOf(autoCompleteCol.DataField) < 0 Then dt.Columns.Add(autoCompleteCol.DataField, autoCompleteCol.DataType)
            End If

            Dim attachmentCol As GridAttachmentColumn = TryCast(gridCol, GridAttachmentColumn)

            If attachmentCol IsNot Nothing Then
                If Not String.IsNullOrEmpty(attachmentCol.DataTextField) AndAlso dt.Columns.IndexOf(attachmentCol.DataTextField) < 0 Then dt.Columns.Add(attachmentCol.DataTextField, attachmentCol.DataType)
            End If

            Dim calculatedCol As GridCalculatedColumn = TryCast(gridCol, GridCalculatedColumn)

            If calculatedCol IsNot Nothing Then

                For Each field As String In calculatedCol.DataFields
                    If dt.Columns.IndexOf(field) < 0 Then dt.Columns.Add(field, GetType(Integer))
                Next
            End If
        Next

        For i As Integer = 0 To recordsCount
            Dim row As DataRow = dt.NewRow()

            For Each col As DataColumn In dt.Columns

                If col.DataType = GetType(Integer) Then
                    row(col.ColumnName) = i & 1
                ElseIf col.DataType = GetType(String) Then
                    row(col.ColumnName) = col.ColumnName & i
                ElseIf col.DataType = GetType(DateTime) Then
                    row(col.ColumnName) = DateTime.Now.Date.AddDays(i)
                ElseIf col.DataType = GetType(Decimal) OrElse col.DataType = GetType(Double) OrElse col.DataType = GetType(Single) Then
                    row(col.ColumnName) = i * 0.1
                End If
            Next

            dt.Rows.Add(row)
        Next

        Return dt
    End Function
]]>
      </Code>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Data</Namespace>
        </Import>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
		<Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
		<Import>
          <Namespace>Telerik.Web.UI</Namespace>
        </Import>
      </Imports>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
