<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>RadGrid Self Data Source</Title>
      <Shortcut>radgridselfdatasource</Shortcut>
      <Description>CSharp code snippet for Generating a DataSource based on the Grid's Markup definition</Description>
      <Author>Progress</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="csharp">
<![CDATA[ 
    protected void RadGrid1_NeedDataSource(object sender, GridNeedDataSourceEventArgs e)
    {
        var grid = (RadGrid)sender;
        grid.DataSource = GridSelfDataSource(grid); $end$
    }
	
    private DataTable GridSelfDataSource(RadGrid grid, int recordsCount = 100)
    {
        if (!grid.AllowPaging) recordsCount = 20;

        var dt = new DataTable();

        // Access the DataKeyNames collection of the MasterTable
        var dataKeyNames = grid.MasterTableView.DataKeyNames;

        // Loop through the DataKeyNames
        foreach (string dataKeyName in dataKeyNames)
        {
            dt.Columns.Add(new DataColumn(dataKeyName, typeof(int)));
        }

        if (dataKeyNames.Length > 0)
            dt.PrimaryKey = new DataColumn[] { dt.Columns[dataKeyNames[0]] };

        IEnumerable<IGridDataColumn> dataColumns = grid.MasterTableView.RenderColumns.OfType<IGridDataColumn>();

        // First Loop through all GridBoundColumns.
        foreach (GridBoundColumn boundCol in dataColumns.Where(col => col.GetType().Name == "GridBoundColumn").Select(col => col as GridBoundColumn))
        {
            // Ignore the column if has no DataField property defined
            if (string.IsNullOrEmpty(boundCol.DataField)) continue;

            // Assume String Type
            Type dataType = boundCol.DataType;

            if (boundCol.Aggregate != GridAggregateFunction.None)
            {
                // If Column has no DataType specified but Aggregates
                switch (boundCol.Aggregate)
                {
                    case GridAggregateFunction.Sum:
                    case GridAggregateFunction.Min:
                    case GridAggregateFunction.Max:
                    case GridAggregateFunction.Avg:
                        // For aggregates like Sum, Min, Max, Avg change the type to double
                        dataType = typeof(double);
                        break;
                }
            }

            if (dataKeyNames.Contains(boundCol.DataField))
            {
                if (dataType != typeof(string))
                {
                    dt.Columns[boundCol.DataField].DataType = dataType;
                }
            }
            else if (dt.Columns.IndexOf(boundCol.DataField) < 0)
            {
                dt.Columns.Add(boundCol.DataField, dataType);
            }
        }

        // Loop through the rest of the columns
        foreach (IGridDataColumn gridCol in dataColumns.Where(col => col.GetType().Name != "GridBoundColumn"))
        {
            string activeDataField = gridCol.GetActiveDataField();

            if (string.IsNullOrEmpty(activeDataField) || dt.Columns.IndexOf(activeDataField) > -1) continue;

            GridNumericColumn numericCol = gridCol as GridNumericColumn;
            if (numericCol != null)
            {
                dt.Columns.Add(numericCol.DataField, typeof(int));
            }

            GridDateTimeColumn dateTimeCol = gridCol as GridDateTimeColumn;
            if (dateTimeCol != null)
            {
                dt.Columns.Add(dateTimeCol.DataField, typeof(DateTime));
            }

            GridTemplateColumn templateCol = gridCol as GridTemplateColumn;
            if (templateCol != null)
            {
                dt.Columns.Add(templateCol.DataField, templateCol.DataType);
            }

            GridHyperLinkColumn hyperLinkCol = gridCol as GridHyperLinkColumn;
            if (hyperLinkCol != null)
            {
                if (!string.IsNullOrEmpty(hyperLinkCol.DataTextField) && dt.Columns.IndexOf(hyperLinkCol.DataTextField) < 0)
                    dt.Columns.Add(hyperLinkCol.DataTextField, hyperLinkCol.DataType);

                foreach (string navUrl in hyperLinkCol.DataNavigateUrlFields)
                {
                    if (dt.Columns.IndexOf(navUrl) >= 0) continue;

                    dt.Columns.Add(navUrl, hyperLinkCol.DataType);
                }
            }

            GridDropDownColumn dropDownCol = gridCol as GridDropDownColumn;
            if (dropDownCol != null)
            {
                if (!string.IsNullOrEmpty(dropDownCol.DataField) && dt.Columns.IndexOf(dropDownCol.DataField) < 0)
                    dt.Columns.Add(dropDownCol.DataField, dropDownCol.DataType);

                if (!string.IsNullOrEmpty(dropDownCol.ListTextField) && dt.Columns.IndexOf(dropDownCol.ListTextField) < 0)
                    dt.Columns.Add(dropDownCol.ListTextField, dropDownCol.DataType);

                if (!string.IsNullOrEmpty(dropDownCol.ListValueField) && dt.Columns.IndexOf(dropDownCol.ListValueField) < 0)
                    dt.Columns.Add(dropDownCol.ListValueField, dropDownCol.DataType);

                if (!string.IsNullOrEmpty(dropDownCol.ListDataMember) && dt.Columns.IndexOf(dropDownCol.ListDataMember) < 0)
                    dt.Columns.Add(dropDownCol.ListDataMember, dropDownCol.DataType);
            }

            GridAutoCompleteColumn autoCompleteCol = gridCol as GridAutoCompleteColumn;
            if (autoCompleteCol != null)
            {
                if (!string.IsNullOrEmpty(autoCompleteCol.DataField) && dt.Columns.IndexOf(autoCompleteCol.DataField) < 0)
                    dt.Columns.Add(autoCompleteCol.DataField, autoCompleteCol.DataType);
            }

            GridAttachmentColumn attachmentCol = gridCol as GridAttachmentColumn;
            if (attachmentCol != null)
            {
                if (!string.IsNullOrEmpty(attachmentCol.DataTextField) && dt.Columns.IndexOf(attachmentCol.DataTextField) < 0)
                    dt.Columns.Add(attachmentCol.DataTextField, attachmentCol.DataType);
            }

            GridCalculatedColumn calculatedCol = gridCol as GridCalculatedColumn;
            if (calculatedCol != null)
            {
                foreach (string field in calculatedCol.DataFields)
                {
                    if (dt.Columns.IndexOf(field) < 0)
                        dt.Columns.Add(field, typeof(int));
                }
            }
        }

        for (int i = 0; i <= recordsCount; i++)
        {
            DataRow row = dt.NewRow();

            foreach (DataColumn col in dt.Columns)
            {
                if (col.DataType == typeof(int))
                {
                    row[col.ColumnName] = i + 1;
                }
                else if (col.DataType == typeof(string))
                {
                    row[col.ColumnName] = col.ColumnName + i;
                }
                else if (col.DataType == typeof(DateTime))
                {
                    row[col.ColumnName] = DateTime.Now.Date.AddDays(i);
                }
                else if (col.DataType == typeof(decimal) || col.DataType == typeof(double) || col.DataType == typeof(float))
                {
                    row[col.ColumnName] = i * 0.1;
                }
            }
            dt.Rows.Add(row);
        }
        return dt;
    }
]]>
      </Code>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Data</Namespace>
        </Import>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
		<Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
		<Import>
          <Namespace>Telerik.Web.UI</Namespace>
        </Import>
      </Imports>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
