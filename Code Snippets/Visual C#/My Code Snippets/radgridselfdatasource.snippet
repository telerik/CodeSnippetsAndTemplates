<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>RadGrid Self Data Source</Title>
      <Shortcut>gridsnippet</Shortcut>
      <Description>CSharp code snippet for Generating a DataSource based on the Grid's Markup definition</Description>
      <Author>Progress</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="csharp">
<![CDATA[$end$
protected void RadGrid1_NeedDataSource(object sender, GridNeedDataSourceEventArgs e)
{
    RadGrid grid = (RadGrid) sender;
    grid.DataSource = GridSelfDataSource(grid);
}

#region Data Source Generator for RadGrid
private DataTable GridSelfDataSource(RadGrid grid, int recordsCount = 20)
{
    var dt = new DataTable();

    foreach (string dataKeyName in grid.MasterTableView.DataKeyNames)
    {
        dt.Columns.Add(dataKeyName, typeof(int));
    }

    foreach (IGridDataColumn gridDataCol in grid.MasterTableView.RenderColumns.Where(col => col is IGridDataColumn))
    {
        string dataField = gridDataCol.GetActiveDataField();

        if (string.IsNullOrEmpty(dataField)) continue;

        Type dataType = GetColumnDataType(gridDataCol);

        if (gridDataCol.GetType().Name == "GridHyperLinkColumn")
        {
            GridHyperLinkColumn hyperLinkCol = (GridHyperLinkColumn) gridDataCol;

            AddColumnToTable(dt, hyperLinkCol.DataTextField, typeof(string));

            foreach (string fieldName in hyperLinkCol.DataNavigateUrlFields)
            {
                AddColumnToTable(dt, fieldName, typeof(string));
            }
        }
        else if (gridDataCol.GetType().Name == "GridDropDownColumn")
        {
            GridDropDownColumn dropDownCol = (GridDropDownColumn) gridDataCol;
            AddColumnToTable(dt, dropDownCol.ListTextField, typeof(string));
            AddColumnToTable(dt, dropDownCol.ListValueField, typeof(string));
        }
        if (gridDataCol.GetType().Name == "GridAutoCompleteColumn")
        {
            GridAutoCompleteColumn autoCompleteCol = (GridAutoCompleteColumn) gridDataCol;
            AddColumnToTable(dt, autoCompleteCol.DataTextField, typeof(string));
            AddColumnToTable(dt, autoCompleteCol.DataValueField, typeof(string));
        }
        if (gridDataCol.GetType().Name == "GridAttachmentColumn")
        {
            GridAttachmentColumn attachmentCol = (GridAttachmentColumn) gridDataCol;
            AddColumnToTable(dt, attachmentCol.DataTextField, typeof(string));
            AddColumnToTable(dt, attachmentCol.AttachmentDataField, typeof(string));
        }
        if (gridDataCol.GetType().Name == "GridCalculatedColumn")
        {
            GridDropDownColumn dropDownCol = (GridDropDownColumn) gridDataCol;
            AddColumnToTable(dt, dropDownCol.ListTextField, typeof(string));
        }
        else
        {
            AddColumnToTable(dt, dataField, dataType);
        }
    }

    for (int i = 0; i <= recordsCount; i++)
    {
        DataRow row = dt.NewRow();

        foreach (DataColumn col in dt.Columns)
        {
            if (col.DataType == typeof(int))
            {
                row[col.ColumnName] = i + 1;
            }
            else if (col.DataType == typeof(string))
            {
                row[col.ColumnName] = col.ColumnName + i;
            }
            else if (col.DataType == typeof(DateTime))
            {
                row[col.ColumnName] = DateTime.Now.Date.AddDays(i);
            }
            else if (col.DataType == typeof(decimal) || col.DataType == typeof(double) || col.DataType == typeof(float))
            {
                row[col.ColumnName] = i * 0.1;
            }
            else if (col.DataType == typeof(bool))
            {
                row[col.ColumnName] = i % 3 == 0;
            }
        }
        dt.Rows.Add(row);
    }

    return dt;
}

private Type GetColumnDataType(IGridDataColumn col)
{
    // Aggregates for Numeric values only
    int[] aggregateTypes = new int[] { (int) GridAggregateFunction.Sum, (int) GridAggregateFunction.Min, (int) GridAggregateFunction.Max, (int) GridAggregateFunction.Avg };

    Type dataType = ((GridColumn) col).DataType;

    switch (col.GetType().Name)
    {
        case "GridBoundColumn":
            GridBoundColumn boundCol = (GridBoundColumn) col;
            if (aggregateTypes.Contains((int) boundCol.Aggregate)) dataType = typeof(decimal);
            break;
        case "GridNumericColumn":
            GridNumericColumn numericCol = (GridNumericColumn) col;
            if (aggregateTypes.Contains((int) numericCol.Aggregate)) dataType = typeof(decimal);
            break;
        case "GridDateTimeColumn":
            GridDateTimeColumn dateTimeCol = (GridDateTimeColumn) col;
            if (aggregateTypes.Contains((int) dateTimeCol.Aggregate)) dataType = typeof(DateTime);
            break;
        case "GridTemplateColumns":
            GridTemplateColumn templateCol = (GridTemplateColumn) col;
            if (aggregateTypes.Contains((int) templateCol.Aggregate)) dataType = typeof(decimal);
            break;
        case "GridCheckBoxColumn":
            dataType = typeof(bool);
            break;
    }

    return dataType;
}

private void AddColumnToTable(DataTable dt, string columnName, Type dataType)
{
    if (dt.Columns.IndexOf(columnName) > -1)
    {
        if (dataType != typeof(string))
        {
            dt.Columns[columnName].DataType = dataType;
        }
    }
    else
    {
        dt.Columns.Add(columnName, dataType);
    }
}
#endregion
]]>
      </Code>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Data</Namespace>
        </Import>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
		<Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
		<Import>
          <Namespace>Telerik.Web.UI</Namespace>
        </Import>
      </Imports>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
